= Module 10 Lab =
== Requirements ==
=== 8.1 ( CHECK PROTECTION ) ===
* Although electronic deposit has become extremely popular, payroll and accounts payable applications often print checks. A serious problem is the intentional alteration of a check amount by someone who plans to cash a check fraudulently. To prevent a dollar amount from being altered, some computerized check-writing systems employ a technique called check protection. Checks designed for printing by computer typically contain a fixed number of spaces for the printed amount. Suppose a paycheck contains eight blank spaces in which the computer is supposed to print the amount of a weekly paycheck. If the amount is large, then all eight of the spaces will be filled:
{{{
1,230.60 ( check amount )
--------
01234567 ( position numbers )
}}}
* On the other hand, if the amount is smaller, then several of the spaces would ordinarily be left blank. For example,
{{{
  399.87
--------
01234567
}}}
* Write a script that inputs a dollar amount, then prints the amount in check-protected format in a field of 10 characters with leading asterisks if necessary. [Hint: In a format string that explicitly specifies alignment with <, ^ or >, you can precede the alignment specifier with the fill character of your choice.]
== Test plan ==
=== Assumptions ===
* The instructions are not super clear about how to handle commas & periods.
* We assume therefore: The field length of 10 characters includes commans in the length count.
* We assume therefore: 999999.99, i.e. ( 999,999.99 ), as the system maximum limit.
* The instructions are not super clear about how to handle the decimal point.
* The instructions are not super clear about how to handle tens & hundredths units.
* We assume therefore: the period, tenths & hundredths must be entered manually be the user.
* The instructions are not super clear about how to handle negatives.
* We assume therefore: negative numbers are not permitted.
=== Program shall accept these values: ===
* 12.34 for     *****12.34
* 123456.99 for 123,456.99
* 999999.99 for 999,999.99
* 1.50      for ******1.50 
* 0.00      for ******0.00
=== Program shall reject these values: ===
* 'cat'        -- String is not a float.
* 'one'        -- String is not a float. 
* -1           -- System rejects integers, i.e.: manual placement of decimal point is required.
* -1.00        -- System rejects negative numbers.
* 0            -- System rejects integers, i.e.: manual placement of decimal point is required.
* 1.5          -- System requires explicit entry of decimal point, tenths places, & hundredths.
* 999,999.99   -- Python out of the box doesn't accept commas in float inputs.
* 1000000.00   -- 1,000,000.00 is above the accepted value range, i.e.: 0 < x < 999,999.99
